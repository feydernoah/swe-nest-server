# Copyright (C) 2021 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# siehe app.module.ts

schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Fahrraddaten zu lesen"
type Query {
  bikes(suchkriterien: SuchkriterienInput): [Bike!]

  bike(id: ID!): Bike
}

"Funktionen, um Fahrräder neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: BikeInput!): CreatePayload

  update(input: BikeUpdateInput!): UpdatePayload

  delete(id: ID!): Boolean

  # Mutation, wenn z.B. der Login-Zeitpunkt im IDM-System gespeichert wird
  token(username: String!, password: String!): TokenResult
  refresh(refresh_token: String!): TokenResult
}

"Daten zum Titel eines Fahrrads"
type Title {
  title: String!
  subtitle: String
}

"Daten zum Titel eines Fahrrads"
type Image {
  description: String!
  contentType: String
}

"Datenschema zu einem Fahrrad, das gelesen wird"
type Bike {
  id: Int!
  version: Int!
  brand: String!
  type: String
  price: Float!
  available: Boolean
  createdAt: String
  updatedAt: String
  title: Title!
  images: [Image!]
}

"Suchkriterien für Fahrräder"
input SuchkriterienInput {
  title: String
  brand: String
  type: String
  available: Boolean
}

"Daten zum Titel eines neuen Fahrrads"
input TitleInput {
  title: String!
  subtitle: String
}

"Daten zu den Abbildungen eines Fahrrads"
input ImageInput {
  description: String!
  contentType: String!
}

"Daten für ein neues Fahrrad"
input BikeInput {
  brand: String
  type: String
  price: Float
  available: Boolean
  createdAt: String
  updatedAt: String
  title: TitleInput!
  images: [ImageInput!]
}

type CreatePayload {
  id: Int
}

"Daten für ein zu änderndes Fahrrad"
input BikeUpdateInput {
  id: ID
  version: Int
  brand: String
  type: String
  price: Float
  available: Boolean
  createdAt: String
  updatedAt: String
}

type UpdatePayload {
  version: Int
}

type TokenResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
}
